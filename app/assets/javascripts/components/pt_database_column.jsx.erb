
var PT_Database_Column = React.createClass({
	getInitialState : function(){
		var can_edit = this.props.can_edit;
		if(this.props.data.name=='id'){
			can_edit = false;
		}
		return {
			showControlBar : false,
			can_edit : can_edit
		};
	},
	createLineIfNeed : function(){
		var table = tableKeyLinkDict[this.props.data.name];
		if( ! table){
			return false;
		}
		var style_line = {
			stroke: 'rgb(64, 64, 64)',
			strokeWidth: '2'
		};
		var height = this.props.height / 2;
		var key = 'link_' + this.props.data.id +'_to_' + this.props.data.name
		var tableWidth = 0;
		if(table.width){
			tableWidth = table.width;
		}
		table.notifyChanges[key] = this;
		if(this.props.tx > table.state.x ){
			return (<line 
				key = {key}
				x1={-3}
				y1={height}
				x2={table.state.x - this.props.tx + tableWidth - 3}
				y2={table.state.y - this.props.ty - this.offset + height}
				style={style_line} />);
		}else{
			return (<line 
				key = {key}
				x1={this.props.width}
				y1={height}
				x2={table.state.x - this.props.tx - 3}
				y2={table.state.y - this.props.ty - this.offset + height}
				style={style_line} />);
		}
	},
	handleMouseOver : function(e){
		this.setState({
			showControlBar : true
		});
	},
	handleMouseOut : function(e){
		this.setState({
			showControlBar : false
		});
	},
	handleEditClick : function(e){
		if(! this.state.can_edit){
			return;
		}
		var data = this.props.data;
		var table = this.props.table;
		var modal = $('#modal_table_column');
		modal.find('.modal-title').text('New Column');
		modal.find('[name=table_id]').val(table.id);
		for(key in data){
			modal.find('[name=' + key + ']').val(data[key]);
		}
		modal.find('[name=column_id]').val(data.id);
		modal.find('.exists_control').show();
		modal.modal('show');
	},
	createControlBar : function(){
		if(this.state.can_edit && this.state.showControlBar){
			return <PT_Database_TableBox_Btn
					data={this.props.data}
					key={this.props.data.id + "_cccb_edit"}
					x={-22} y={2} title="Edit"
					width={20} height={20} icon={url_icon_edit}
					onClick={this.handleEditClick} />
		}
		return false;
	},
	render: function(){
		var offset = this.props.height * this.props.index;
		this.offset = offset;
		var transform = 'translate(0, ' + offset + ')';

		var y_text_offset = 16, x_text_offset = 4;
		var x_type = this.props.width - measureTextWidth(this.props.data.ttype);

		var style_box = {
			width : this.props.width - 10,
			height : this.props.height - 4,
			fill: 'rgb(240, 255, 255)',
			stroke: 'rgb(64, 64, 64)',
			strokeWidth: '1'
		}

		if(this.state.showControlBar){
			style_box.cursor = 'pointer';
			style_box.fill = 'rgb(255, 255, 245)'
		}else{
			style_box.cursor = '';
		}

		var controlBars = this.createControlBar();

		var line = this.createLineIfNeed();
		return (<g transform={transform} 
			onMouseOver={this.handleMouseOver}
			onClick={this.handleEditClick}
			onMouseOut={this.handleMouseOut} >
			{line}
			<rect style={style_box} ></rect>
			<text x={x_text_offset} y={y_text_offset} >{this.props.data.name}</text>
			<text x={x_type} y={y_text_offset} >{this.props.data.ttype}</text>
			{controlBars}
		</g>);
	}
});